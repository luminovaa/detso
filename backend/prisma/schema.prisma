generator client {
    provider        = "prisma-client-js"
    previewFeatures = ["fullTextSearchPostgres", "driverAdapters"]
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model Detso_User {
    id         String         @id @default(cuid())
    username   String         @unique
    email      String         @unique
    password   String
    created_at DateTime       @default(now())
    phone      String?        @unique
    updated_at DateTime       @updatedAt
    deleted_at DateTime?
    profile    Detso_Profile?

    role           Detso_Role            @default(TEKNISI)
    refresh_tokens Detso_Refresh_Token[]
    ticket         Detso_Ticket[]
    schedule       Detso_Work_Schedule[]

    @@index([deleted_at])
    @@map("detso_users")
}

model Detso_Profile {
    id         String    @id @default(cuid())
    user_id    String    @unique
    full_name  String
    avatar     String?
    created_at DateTime  @default(now())
    updated_at DateTime  @updatedAt
    deleted_at DateTime?

    user Detso_User @relation(fields: [user_id], references: [id])

    @@index([deleted_at])
    @@map("detso_profiles")
}

model Detso_Refresh_Token {
    id          String    @id @default(cuid())
    user_id     String
    token       String    @unique
    device_info String? // Info device (Android/Web + browser/app version)
    ip_address  String?
    user_agent  String?
    expires_at  DateTime
    created_at  DateTime  @default(now())
    updated_at  DateTime  @updatedAt
    revoked_at  DateTime?
    is_active   Boolean   @default(true)

    user Detso_User @relation(fields: [user_id], references: [id], onDelete: Cascade)

    @@index([user_id])
    @@index([token])
    @@index([expires_at])
    @@map("detso_refresh_tokens")
}

model Detso_Customer {
    id          String    @id @default(cuid())
    name        String
    phone       String?
    email       String?
    nik         String?
    address     String?
    birth_date  DateTime?
    birth_place String?
    created_at  DateTime  @default(now())
    updated_at  DateTime  @updatedAt
    deleted_at  DateTime?

    documents    Detso_Customer_Document[]
    service      Detso_Service_Connection[]
    pdf          Detso_Customer_PDF[]
    whatsApp_Log Detso_WhatsApp_Log[]
    ticket       Detso_Ticket[]

    @@index([deleted_at])
    @@index([phone])
    @@index([nik])
    @@map("detso_customers")
}

model Detso_WhatsApp_Log {
    id            String   @id @default(cuid())
    customer_id   String?
    phone_number  String
    message_type  String // 'installation_report', 'payment_reminder', etc.
    status        String // 'sent', 'failed', 'pending'
    error_message String? // jika ada error
    sent_at       DateTime @default(now())
    created_at    DateTime @default(now())
    updated_at    DateTime @updatedAt

    // Relasi ke customer
    customer Detso_Customer? @relation(fields: [customer_id], references: [id])

    @@map("detso_whatsapp_logs")
}

model Detso_Customer_Document {
    id            String   @id @default(cuid())
    customer_id   String?
    document_type String
    document_url  String
    uploaded_at   DateTime @default(now())

    customer Detso_Customer? @relation(fields: [customer_id], references: [id])

    @@index([customer_id])
    @@map("detso_customer_documents")
}

model Detso_Service_Connection {
    id            String                @id @default(cuid())
    customer_id   String
    id_pel        String?               @unique
    package_id    String
    address       String?
    package_name  String
    package_speed String
    package_price Int?
    ip_address    String?
    lat           String?
    long          String?
    mac_address   String?
    status        Detso_Customer_Status @default(ACTIVE)
    created_at    DateTime              @default(now())
    updated_at    DateTime              @updatedAt
    deleted_at    DateTime?
    notes         String?

    customer Detso_Customer        @relation(fields: [customer_id], references: [id])
    package  Detso_Package         @relation(fields: [package_id], references: [id])
    photos   Detso_Service_Photo[]
    pdf      Detso_Customer_PDF[]
    ticket   Detso_Ticket[]

    @@index([deleted_at])
    @@map("detso_service_connections")
}

model Detso_Service_Photo {
    id          String   @id @default(cuid())
    service_id  String
    photo_type  String // e.g., 'INSTALLATION', 'ROUTER_SETUP', 'LOCATION'
    photo_url   String
    uploaded_at DateTime @default(now())
    notes       String?

    service Detso_Service_Connection @relation(fields: [service_id], references: [id])

    @@index([service_id])
    @@map("detso_service_photos")
}

model Detso_Customer_PDF {
    id                    String   @id @default(cuid())
    customer_id           String
    service_connection_id String
    pdf_type              String   @default("installation_report")
    pdf_path              String
    generated_at          DateTime @default(now())

    customer           Detso_Customer           @relation(fields: [customer_id], references: [id])
    service_connection Detso_Service_Connection @relation(fields: [service_connection_id], references: [id])

    @@map("detso_customer_pdfs")
}

model Detso_Package {
    id         String    @id @default(cuid())
    name       String
    speed      String
    price      Int
    deleted_at DateTime?
    created_at DateTime  @default(now())
    updated_at DateTime  @updatedAt

    service Detso_Service_Connection[]

    @@map("detso_packages")
}

model Detso_Ticket {
    id          String         @id @default(cuid())
    customer_id String
    service_id  String?
    title       String
    description String
    priority    TicketPriority @default(MEDIUM)
    status      TicketStatus   @default(OPEN)
    assigned_to String? // teknisi user_id
    created_at  DateTime       @default(now())
    updated_at  DateTime       @updatedAt
    resolved_at DateTime?

    customer   Detso_Customer            @relation(fields: [customer_id], references: [id])
    service    Detso_Service_Connection? @relation(fields: [service_id], references: [id])
    technician Detso_User?               @relation(fields: [assigned_to], references: [id])
    schedule   Detso_Work_Schedule?

    @@map("detso_tickets")
}

model Detso_Work_Schedule {
    id            String         @id @default(cuid())
    ticket_id     String?        @unique
    technician_id String
    start_time    DateTime
    end_time      DateTime?
    status        ScheduleStatus @default(SCHEDULED)
    notes         String?

    ticket     Detso_Ticket? @relation(fields: [ticket_id], references: [id])
    technician Detso_User    @relation(fields: [technician_id], references: [id])

    @@map("detso_work_schedules")
}

enum TicketStatus {
    OPEN
    IN_PROGRESS
    RESOLVED
    CLOSED
}

enum TicketPriority {
    LOW
    MEDIUM
    HIGH
    URGENT
}

enum ScheduleStatus {
    SCHEDULED
    COMPLETED
    CANCELLED
}

enum Detso_Customer_Status {
    ACTIVE
    INACTIVE
    SUSPENDED
}

enum Detso_Role {
    TEKNISI
    ADMIN
    SUPER_ADMIN
}
